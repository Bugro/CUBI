#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include <cmath>
#include <string>

using namespace cv;
using namespace std;

#define PI 3.14159265

int maxCanneX = 0;
int minCanneX = 640;
int maxCanneY = 0; 
int minCanneY = 480;

int ecartCanne = 0;

int coefDirCanne = 0;
int ordOrigCanne = 0;

int compteurDePoint = 0;
int compteurDeCouleur = 0;
int compteurDeLigne = 0;

Rect myROI, ROICanne;

Mat matRecadrer, matRotatedFrame, blam, dst, cdst;

int thresholdCanny = 9;
int thresholdCenter = 16;

int minLineLengh = 30;
int maxLineGap = 30;

int minRed = 120;
int maxRed = 130;
int maxNoire = 90;
int maxBlanche = 40;
int minJaune = 90;
int maxJaune = 100;

//Paramêtres des cercles 
const int DIST_MIN = 5;
const int MIN_SIZE = 5;
const int MAX_SIZE = 10;

const string trackbarWindowName = "Trackbars";

void on_trackbar( int, void* )
{//This function gets called whenever a
	// trackbar position is changed
}

void createTrackbars(){
	//create window for trackbars

	
	namedWindow(trackbarWindowName,0);
	//create memory to store trackbar name on window
	char TrackbarName[50];
	sprintf( TrackbarName, "UpperCanny", thresholdCanny);
	sprintf( TrackbarName, "CenterDetection", thresholdCenter);

	sprintf( TrackbarName, "Min Red", minRed);
	sprintf( TrackbarName, "Max Red", maxRed);
	sprintf( TrackbarName, "Max Noire", maxNoire);
	sprintf( TrackbarName, "Max Blanche", maxBlanche);
	sprintf( TrackbarName, "Min Jaune", minJaune);
	sprintf( TrackbarName, "Max Jaune", maxJaune);

	//create trackbars and insert them into window
	//3 parameters are: the address of the variable that is changing when the trackbar is moved(eg.H_LOW),
	//the max value the trackbar can move (eg. H_HIGH), 
	//and the function that is called whenever the trackbar is moved(eg. on_trackbar)
	//                                  ---->    ---->     ---->      
	createTrackbar( "UpperCanny", trackbarWindowName, &thresholdCanny, 50, on_trackbar );
	createTrackbar( "CenterDetection", trackbarWindowName, &thresholdCenter, 50, on_trackbar );
	

	createTrackbar( "Min Red", trackbarWindowName, &minRed, 255, on_trackbar );
	createTrackbar( "Max Red", trackbarWindowName, &maxRed, 255, on_trackbar );
	createTrackbar( "Max Noire", trackbarWindowName, &maxNoire, 255, on_trackbar );
	createTrackbar( "Max Blanche", trackbarWindowName, &maxBlanche, 255, on_trackbar );
	createTrackbar( "Min Jaune", trackbarWindowName, &minJaune, 255, on_trackbar );
	createTrackbar( "Max Jaune", trackbarWindowName, &maxJaune, 255, on_trackbar );

}

//create the structure Point to store positions
struct Pointrect
{
	double xCoord;
	double yCoord;
};

struct Bille
{
	int xCoord;
	int yCoord;
	string color; //N (noir), B(blanc), J(jaune) ou R(rouge)
};

//create a table of 8 points
struct Pointrect rectangleBillard[100]; // On autorise 100 cliques de l'utilisateur -> c'est sale : à changer -> du genre désactiver la possibilité de cliquer après le douzième point

//tableau des 4 points moyens
struct Pointrect rectMoy[4];

//La canne
struct Pointrect cannePoint[2];

// Fonction pour récupérer les actions de la souris
void CallBackFunc(int event, int x, int y, int flags, void* userdata)
{
     if  ( event == EVENT_LBUTTONDOWN ) // Lorsqu'on clique on crée des points
     {
          //cout << "Left button of the mouse is clicked - position (" << x << ", " << y << ")" << endl;
		  rectangleBillard[compteurDePoint].xCoord = x;
		  rectangleBillard[compteurDePoint].yCoord = y;
		  cout << "Le point numéro " << compteurDePoint << " a pour position (" << rectangleBillard[compteurDePoint].xCoord << ", " << rectangleBillard[compteurDePoint].yCoord << ")." << endl;
		  compteurDePoint++;
	 }
}

int main(int argc, char* argv[])
{
	//Initialisation de rectangleBillard
	rectangleBillard[0].xCoord = 85;
	rectangleBillard[0].yCoord = 309;
	rectangleBillard[1].xCoord = 58;
	rectangleBillard[1].yCoord = 102;
	rectangleBillard[2].xCoord = 80;
	rectangleBillard[2].yCoord = 74;
	rectangleBillard[3].xCoord = 287;
	rectangleBillard[3].yCoord = 69;
	rectangleBillard[4].xCoord = 349;
	rectangleBillard[4].yCoord = 68;
	rectangleBillard[5].xCoord = 540;
	rectangleBillard[5].yCoord = 61;
	rectangleBillard[6].xCoord = 575;
	rectangleBillard[6].yCoord = 84;
	rectangleBillard[7].xCoord = 571;
	rectangleBillard[7].yCoord = 257;
	rectangleBillard[8].xCoord = 560;
	rectangleBillard[8].yCoord = 305;
	rectangleBillard[9].xCoord = 358;
	rectangleBillard[9].yCoord = 319;
	rectangleBillard[10].xCoord = 294;
	rectangleBillard[10].yCoord = 316;
	rectangleBillard[11].xCoord = 103;
	rectangleBillard[11].yCoord = 329;
	
    // open the video file for reading
    VideoCapture cap("Capture_20150204_1.mp4"); 

    // if not success, exit program
    if ( !cap.isOpened() )  
    {
         cout << "Cannot open the video file" << endl;
         return -1;
    }

    const char* pzOriginalWindowName = "Original Video, Définissez les bandes ici";
    namedWindow(pzOriginalWindowName, CV_WINDOW_AUTOSIZE); 

    const char* pzRotatingWindowName = "Rotated Video";
    //namedWindow( pzRotatingWindowName, CV_WINDOW_AUTOSIZE );
	
    const char* pzCirclesWindowName = "Circles Video";
    //namedWindow( pzCirclesWindowName, CV_WINDOW_AUTOSIZE );

	//Create the trackbars window
	createTrackbars();

    double iAngle = 180;
	double iAngle1 = 180;
	double iAngle2 = 180;
	double iAngle3 = 180;
	double iAngle4 = 180;

    while (true)
    {
        Mat matOriginalFrame;

		// read a new frame from video
        bool bSuccess = cap.read(matOriginalFrame); 

		//if not success, break loop
        if (!bSuccess) 
		{
			cout << "Cannot read the frame from video file" << endl;
			break;
        }

        imshow(pzOriginalWindowName, matOriginalFrame);

		//set the callback function for any mouse event
		setMouseCallback( pzOriginalWindowName, CallBackFunc, NULL); //On choisi la fenêtre sur laquelle on travail

		//On affiche la fenêtre recadrée que lorsqu'on a fini de cliquer les 12 points
		if(compteurDePoint > 11)
		{
			// évite que le calcul des points soit fait pour chaque image après la saisie du 8eme point
			if(compteurDePoint == 12)
			{
				// calcul des 4 points moyens à partir des 8 cliqués

				//pour les x
				rectMoy[0].xCoord = (rectangleBillard[0].xCoord + rectangleBillard[1].xCoord) / 2;
				rectMoy[1].xCoord = (rectangleBillard[2].xCoord + rectangleBillard[3].xCoord + rectangleBillard[4].xCoord + rectangleBillard[5].xCoord) / 4;
				rectMoy[2].xCoord = (rectangleBillard[6].xCoord + rectangleBillard[7].xCoord) / 2;
				rectMoy[3].xCoord = (rectangleBillard[8].xCoord + rectangleBillard[9].xCoord + rectangleBillard[10].xCoord + rectangleBillard[11].xCoord) / 4;

				//pour les y
				rectMoy[0].yCoord = (rectangleBillard[0].yCoord + rectangleBillard[1].yCoord) / 2;
				rectMoy[1].yCoord = (rectangleBillard[2].yCoord + rectangleBillard[3].yCoord + rectangleBillard[4].yCoord + rectangleBillard[5].yCoord) / 4;
				rectMoy[2].yCoord = (rectangleBillard[6].yCoord + rectangleBillard[7].yCoord) / 2;
				rectMoy[3].yCoord = (rectangleBillard[8].yCoord + rectangleBillard[9].yCoord + rectangleBillard[10].yCoord + rectangleBillard[11].yCoord) / 4;

		
				// calcul de l'angle
				iAngle1 = (atan2(rectangleBillard[0].xCoord - rectangleBillard[1].xCoord , rectangleBillard[0].yCoord - rectangleBillard[1].yCoord)) * (180/PI);
				iAngle2 = (atan2(rectangleBillard[2].yCoord - rectangleBillard[5].yCoord , rectangleBillard[5].xCoord - rectangleBillard[2].xCoord)) * (180/PI);
				iAngle3 = (atan2(rectangleBillard[7].xCoord - rectangleBillard[6].xCoord , rectangleBillard[7].yCoord - rectangleBillard[6].yCoord)) * (180/PI);
				iAngle4 = (atan2(rectangleBillard[11].yCoord - rectangleBillard[8].yCoord , rectangleBillard[8].xCoord - rectangleBillard[11].xCoord)) * (180/PI);
		 
				iAngle = (iAngle1 + iAngle2 + iAngle3 + iAngle4) / 4;

				//get the affine transformation matrix
				Mat matRotation = getRotationMatrix2D( Point(matOriginalFrame.cols / 2, matOriginalFrame.rows / 2), - iAngle , 1 ); //iAngle = 182
 
				warpAffine( matOriginalFrame, matRotatedFrame, matRotation, matOriginalFrame.size() );

				//ROI: Region Of Interest : on ne va traiter que cette partie de la matrice
				// Recadrer l'image
				myROI = cvRect( rectMoy[0].xCoord, rectMoy[1].yCoord, rectMoy[2].xCoord - rectMoy[0].xCoord, rectMoy[3].yCoord - rectMoy[1].yCoord);

				compteurDePoint++; //évite que le calcul se fasse plein de fois
			}
			else
			{
				matRecadrer = matRotatedFrame(myROI);
			}
		}
		else //On prend l'image d'origine tant qu'on a pas recadré l'image
		{
			matRecadrer = matOriginalFrame;
		}

/////////////////////////////////////////////// Detection de Lignes //////////////////////////////////////////////////////////////////////////////////////////////

		Mat matLine, matTemp;
		
		matTemp = matOriginalFrame;

		//matLine = matRecadrer;
		//Si on avait la position de la canne avant on la cherche à proximité
		
		/*if(compteurDeLigne == 0)//au premier coup on prend toute l'image
		{
			ROICanne = cvRect(rectangleBillard[1].xCoord, rectangleBillard[1].yCoord, rectangleBillard[7].xCoord - rectangleBillard[1].xCoord, rectangleBillard[8].yCoord - rectangleBillard[1].yCoord);
			matLine = matTemp(ROICanne);
		}
		else if(cannePoint[0].xCoord == 0)
		{
			matLine = matTemp(ROICanne);
		}
		else
		{
			if(coefDirCanne <= 0)
			{
				ROICanne = cvRect(minCanneX + cannePoint[1].xCoord - ecartCanne, minCanneY + cannePoint[1].yCoord - ecartCanne, abs(minCanneX + cannePoint[0].xCoord + ecartCanne - cannePoint[1].xCoord), abs(minCanneY + cannePoint[0].yCoord + ecartCanne - cannePoint[1].yCoord));
			}
			if(coefDirCanne > 0)
			{
				ROICanne = cvRect(minCanneX + cannePoint[0].xCoord - ecartCanne, minCanneY + cannePoint[1].yCoord - ecartCanne, abs(minCanneX + cannePoint[1].xCoord + ecartCanne - cannePoint[0].xCoord), abs(minCanneY + cannePoint[0].yCoord + ecartCanne - cannePoint[1].yCoord));
			}
			
			matLine = matTemp(ROICanne);
		}*/		
		matLine = matOriginalFrame;
		
		Canny(matLine, dst, 50, 200, 3);

		vector<Vec4i> lines;
		vector<Vec4i> canne;

		canne.resize(20);

		HoughLinesP(dst, lines, 1, CV_PI/180, 50, minLineLengh, maxLineGap ); //Plus le 3eme membre est petit plus la fonction est précise mais lente
		
		for( size_t i = 0; i < lines.size(); i++ )
		{
			Vec4i l = lines[i];
			
			line( matLine, Point(l[0], l[1]), Point(l[2], l[3]), Scalar(0,0,255), 1, CV_AA);
			//On essaye d'identifier les lignes correspondant à la canne
			//Les deux rectangles possibles sont : (0, 2, 6, 8) ou (1, 5, 7, 11)
			for(size_t j = 0; j < 20; j++)
			{
			if((compteurDeLigne == 0))
			{
				Point linePoint(cvRound(l[0]), cvRound(l[1]));
				circle( matLine, linePoint, 2, Scalar(0,255,0), -1, 8, 0 );
				Point linePoint2(cvRound(l[2]), cvRound(l[3]));
				circle( matLine, linePoint2, 2, Scalar(0,255,0), -1, 8, 0 );
				canne[j][0] = l[0];
				canne[j][1] = l[1];
				canne[j][2] = l[2];
				canne[j][3] = l[3];
			}
			cout << lines[i] << endl;
			}			
		}
		//On fait la moyenne des points de la canne, il faudrait aussi exclure les points abérants
		for (size_t j = 0; j < canne.size(); j++)
		{
			if(canne[j][2] - canne[j][0] != 0) //On évite la division par zéro
			{
				int coefDir;
				int ordOrig;
				coefDir = (canne[j][3] - canne[j][1]) / (canne[j][2] - canne[j][0]);
				ordOrig = canne[j][1] - coefDir * canne[j][0];
				//On fait la moyenne des coef directeurs et des ordonnées à l'origine
				coefDirCanne = (coefDirCanne + coefDir) / (j + 1);
				ordOrigCanne = (ordOrigCanne + ordOrig) / (j + 1);
			}
		}
		maxCanneX = 0;
		minCanneX = 640;
		maxCanneY = 0; 
		minCanneY = 480;
		//On cherche les max et min
		for(size_t k = 0; k < canne.size(); k++)
		{
			//Pour les max
			if(canne[k][0] > maxCanneX)
			{
				maxCanneX = canne[k][0];
			}
			if(canne[k][1] > maxCanneY)
			{
				maxCanneY = canne[k][1];
			}
			if(canne[k][2] > maxCanneX)
			{
				maxCanneX = canne[k][2];
			}
			if(canne[k][3] > maxCanneY)
			{
				maxCanneY = canne[k][3];
			}
			//Pour les min
			if(canne[k][0] < minCanneX)
			{
				minCanneX = canne[k][0];
			}
			if(canne[k][1] < minCanneY)
			{
				minCanneY = canne[k][1];
			}
			if(canne[k][2] < minCanneX)
			{
				minCanneX = canne[k][2];
			}
			if(canne[k][3] < minCanneY)
			{
				minCanneY = canne[k][3];
			}
		}
		if(coefDirCanne <= 0)
		{
			cannePoint[0].xCoord = maxCanneX;
			cannePoint[0].yCoord = maxCanneY;
			cannePoint[1].xCoord = minCanneX;
			cannePoint[1].yCoord = minCanneY;
		}
		if(coefDirCanne > 0)
		{
			cannePoint[0].xCoord = minCanneX;
			cannePoint[0].yCoord = maxCanneY;
			cannePoint[1].xCoord = maxCanneX;
			cannePoint[1].yCoord = minCanneY;
		}
		//On trace d'un point extreme à l'autre de la canne
		line( matLine, Point(cannePoint[0].xCoord, cannePoint[0].yCoord), Point(cannePoint[1].xCoord, cannePoint[1].yCoord), Scalar(255,255,0), 5, CV_AA);
	

////////////////////////////////////// Detection de cercles //////////////////////////////////////////////////////////////////////


		//On crée deux matrices
		//src : image d'origine
		//gray : image convertie en noir et blanc
		Mat src, gray;
		//src = imread( "building.jpg", 1 );resize(src,src,Size(640,480));
		//cap.read(src);
		src = matRecadrer;
		//Convert src in black and white and store it in matrix gray
		cvtColor( src, gray, CV_BGR2GRAY );
 
		// Reduce the noise so we avoid false circle detection
		// Take gray, return gray, 
		GaussianBlur( gray, gray, Size(13, 13), 1, 1 );
 
		vector<Vec3f> circles;

		//circles.resize(16); // Redéfini le nombre de cercles recherchés -> il faudrait trouver comment utiliser gpu car dasn ce cas le nombre de cercles est un paramêtre de HoughCircle -> c'est mieux !!!
 
		// Apply the Hough Transform to find the circles
		HoughCircles( gray, circles, CV_HOUGH_GRADIENT, 1, DIST_MIN, thresholdCanny, thresholdCenter, MIN_SIZE, MAX_SIZE );
 

		// Draw the circles detected
		for( size_t i = 0; i < circles.size(); i++ )
		{
			Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
			int radius = cvRound(circles[i][2]);     
			//circle( src, center, 2, Scalar(0,255,0), -1, 8, 0 );// circle center     
			circle( src, center, radius, Scalar(255,255,0), 1, 8, 0 );// circle outline
			//cout << "center : " << center << "\nradius : " << radius << endl;
		}


////////////////////////////////////// Détection de couleurs à l'intérieur des cercles ///////////////////////////////////////////////////
		Mat img_rgb, img_hsv;
		img_rgb = src;
		//On converti img_rgb en img_hsv
		cvtColor(img_rgb,img_hsv,CV_RGB2HSV);
		//On crée un tableau des billes
		struct Bille TableauBilles[16];
		//On cherche le couleur à l'intérieur de chaque cercle
		for (size_t i = 0; i < circles.size() ; i++) //pour éviter les erreures d'assertion
		{
			
			//for(int j = 0; j < 10; j++)//On parcours quelques points de la bille pour faire une moyenne
			//{
			int bla = compteurDeCouleur % 1; //On fait l'opération une fois tous les 2 tours
			if(bla == 0)
			{
				//Dans la fonction qui suit y est en premier et x en second
				
				//Le "point" la ligne qui suit est d'une importance primordiale !!!!
				Vec3b intensity = img_hsv.at<Vec3b>(Point(cvRound(circles[i][0]), cvRound(circles[i][1])));//On s'intéresse ici au point d'une des billes
				/* In case of BGR coded image
				int blue = intensity.val[0];
				int green = intensity.val[1];
				int red = intensity.val[2];
				*/
				
				
				//cout << "Bille n° " << i << " is ( " << blue << " ," << green << " ," << red << " )" << endl;
				
				// In case of HVS coded image
				int intens0 = (int)intensity.val[0];
				int intens1 = (int)intensity.val[1];
				int intens2 = (int)intensity.val[2];

				//Si la couleur est comprise dans un intervalle correct alors on considère qu'on a une bille sinon non
				
				
				if(intens1 < maxBlanche)
				{
					TableauBilles[i].color = "Blanche";
					//cout << "Color " << TableauBilles[i].color <<endl;
					//cout << "( " << intens0 << ", " << intens1 << ", " << intens2 << " )" << endl;
					
					putText(src, TableauBilles[i].color, cv::Point(cvRound(circles[i][0]), cvRound(circles[i][1])),1,1,Scalar(255,255,255));  
				}
				else if(intens2 < maxNoire)
				{
					TableauBilles[i].color = "Noire";
					//cout << "Color " << TableauBilles[i].color <<endl;
					//cout << "( " << intens0 << ", " << intens1 << ", " << intens2 << " )" << endl;
					
					putText(src, TableauBilles[i].color, cv::Point(cvRound(circles[i][0]), cvRound(circles[i][1])),1,1,Scalar(0,0,0));  
				}
				else if(intens0 < maxRed && intens0 > minRed)
				{
					TableauBilles[i].color = "Rouge";
					//cout << "Color " << TableauBilles[i].color <<endl;
					//cout << "( " << intens0 << ", " << intens1 << ", " << intens2 << " )" << endl;
					
					putText(src, TableauBilles[i].color, cv::Point(cvRound(circles[i][0]), cvRound(circles[i][1])),1,1,Scalar(0,0,255));  
				}
				else if(intens0 > minJaune && intens0 < maxJaune)
				{
					TableauBilles[i].color = "Jaune";
					//cout << "Color " << TableauBilles[i].color <<endl;
					//cout << "( " << intens0 << ", " << intens1 << ", " << intens2 << " )" << endl;
					
					putText(src, TableauBilles[i].color, cv::Point(cvRound(circles[i][0]), cvRound(circles[i][1])),1,1,Scalar(0,255,255));  
				}
				else
				{
					TableauBilles[i].color = "Unknown"; // for unknonw : ce n'est pas un bille
					//cout << "Color " << TableauBilles[i].color <<endl;
					//cout << "( " << intens0 << ", " << intens1 << ", " << intens2 << " )" << endl;
					
					putText(src, TableauBilles[i].color, cv::Point(cvRound(circles[i][0]), cvRound(circles[i][1])),1,1,Scalar(255,0,0));  
				}
				//cout << "( " << intens0 << ", " << intens1 << ", " << intens2 << " )" << endl;
				//cout << "Color " << TableauBilles[i].color <<endl;
				//cout << "Couleur ( " << intensity[0] << ", " << intensity[1] << ", " << intensity[2] << " )" << endl;
				
			}
			else
			{

			}
		}
		
		

		compteurDeCouleur ++;
		compteurDeLigne ++;
		
///////////////////////////////////////////// Affichage ///////////////////////////////////////////////////////////////////////////////

		// Affiche le resultat
		imshow(pzRotatingWindowName, dst);
			
		imshow(pzCirclesWindowName, src);

		//wait for 'esc' key press for 30 ms. If 'esc' key is pressed, break loop
		if (waitKey(30) == 27) 
		{
			cout << "esc key is pressed by user" << endl; 
			break; 
		}
	}
    return 0;
}