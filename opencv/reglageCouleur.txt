#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include <cmath>
#include <string>

using namespace cv;
using namespace std;

#define PI 3.14159265

int compteurDePoint = 0;
int compteurDeCouleur = 0;

Mat matRecadrer;
Mat matRotatedFrame;

int thresholdCanny = 9;
int thresholdCenter = 16;

int minRed = 120;
int maxRed = 130;
int maxNoire = 130;
int maxBlanche = 40;
int minJaune = 90;
int maxJaune = 100;

//Paramêtres des cercles 
const int DIST_MIN = 5;
const int MIN_SIZE = 5;
const int MAX_SIZE = 10;

const string trackbarWindowName = "Trackbars";

void on_trackbar( int, void* )
{//This function gets called whenever a
	// trackbar position is changed
}

void createTrackbars(){
	//create window for trackbars

	
	namedWindow(trackbarWindowName,0);
	//create memory to store trackbar name on window
	char TrackbarName[50];
	sprintf( TrackbarName, "UpperCanny", thresholdCanny);
	sprintf( TrackbarName, "CenterDetection", thresholdCenter);

	sprintf( TrackbarName, "Min Red", minRed);
	sprintf( TrackbarName, "Max Red", maxRed);
	sprintf( TrackbarName, "Max Noire", maxNoire);
	sprintf( TrackbarName, "Max Blanche", maxBlanche);
	sprintf( TrackbarName, "Min Jaune", minJaune);
	sprintf( TrackbarName, "Max Jaune", maxJaune);

	//create trackbars and insert them into window
	//3 parameters are: the address of the variable that is changing when the trackbar is moved(eg.H_LOW),
	//the max value the trackbar can move (eg. H_HIGH), 
	//and the function that is called whenever the trackbar is moved(eg. on_trackbar)
	//                                  ---->    ---->     ---->      
	createTrackbar( "UpperCanny", trackbarWindowName, &thresholdCanny, 50, on_trackbar );
	createTrackbar( "CenterDetection", trackbarWindowName, &thresholdCenter, 50, on_trackbar );
	

	createTrackbar( "Min Red", trackbarWindowName, &minRed, 255, on_trackbar );
	createTrackbar( "Max Red", trackbarWindowName, &maxRed, 255, on_trackbar );
	createTrackbar( "Max Noire", trackbarWindowName, &maxNoire, 255, on_trackbar );
	createTrackbar( "Max Blanche", trackbarWindowName, &maxBlanche, 255, on_trackbar );
	createTrackbar( "Min Jaune", trackbarWindowName, &minJaune, 255, on_trackbar );
	createTrackbar( "Max Jaune", trackbarWindowName, &maxJaune, 255, on_trackbar );

}

//create the structure Point to store positions
struct Pointrect
{
	double xCoord;
	double yCoord;
};

struct Bille
{
	int xCoord;
	int yCoord;
	string color; //N (noir), B(blanc), J(jaune) ou R(rouge)
};

//create a table of 8 points
struct Pointrect rectangleBillard[12];
//tableau des 4 points moyens
struct Pointrect rectMoy[4];

// Fonction pour récupérer les actions de la souris
void CallBackFunc(int event, int x, int y, int flags, void* userdata)
{
     if  ( event == EVENT_LBUTTONDOWN ) // Lorsqu'on clique on crée des points
     {
          cout << "Left button of the mouse is clicked - position (" << x << ", " << y << ")" << endl;
		  rectangleBillard[compteurDePoint].xCoord = x;
		  rectangleBillard[compteurDePoint].yCoord = y;
		  cout << "Le point numéro " << compteurDePoint << " a pour position (" << rectangleBillard[compteurDePoint].xCoord << ", " << rectangleBillard[compteurDePoint].yCoord << ")." << endl;
		  compteurDePoint++;
	 }
}

int main(int argc, char* argv[])
{
    // open the video file for reading
    VideoCapture cap("Capture_20150204_1.mp4"); 

    // if not success, exit program
    if ( !cap.isOpened() )  
    {
         cout << "Cannot open the video file" << endl;
         return -1;
    }

    const char* pzOriginalWindowName = "Original Video, Définissez les bandes ici";
    //namedWindow(pzOriginalWindowName, CV_WINDOW_AUTOSIZE); 

    const char* pzRotatingWindowName = "Rotated Video";
    //namedWindow( pzRotatingWindowName, CV_WINDOW_AUTOSIZE );
	
    const char* pzCirclesWindowName = "Circles Video";
    namedWindow( pzCirclesWindowName, CV_WINDOW_AUTOSIZE );

	//Create the trackbars window
	createTrackbars();

    double iAngle = 180;
	double iAngle1 = 180;
	double iAngle2 = 180;
	double iAngle3 = 180;
	double iAngle4 = 180;

    while (true)
    {
        Mat matOriginalFrame;

		// read a new frame from video
        bool bSuccess = cap.read(matOriginalFrame); 

		//if not success, break loop
        if (!bSuccess) 
		{
			cout << "Cannot read the frame from video file" << endl;
			break;
        }

        //imshow(pzOriginalWindowName, matOriginalFrame);

		//set the callback function for any mouse event
		setMouseCallback( pzOriginalWindowName, CallBackFunc, NULL); //On choisi la fenêtre sur laquelle on travail

		//On affiche la fenêtre recadrée que lorsqu'on a fini de cliquer les 12 points
		if(compteurDePoint > 11)
			{
			// évite que le calcul des points soit fait pour chaque image après la saisie du 8eme point
			if(compteurDePoint == 12)
			{
				// calcul des 4 points moyens à partir des 8 cliqués

				//pour les x
				rectMoy[0].xCoord = (rectangleBillard[0].xCoord + rectangleBillard[1].xCoord) / 2;
				rectMoy[1].xCoord = (rectangleBillard[2].xCoord + rectangleBillard[3].xCoord + rectangleBillard[4].xCoord + rectangleBillard[5].xCoord) / 4;
				rectMoy[2].xCoord = (rectangleBillard[6].xCoord + rectangleBillard[7].xCoord) / 2;
				rectMoy[3].xCoord = (rectangleBillard[8].xCoord + rectangleBillard[9].xCoord + rectangleBillard[10].xCoord + rectangleBillard[11].xCoord) / 4;

				//pour les y
				rectMoy[0].yCoord = (rectangleBillard[0].yCoord + rectangleBillard[1].yCoord) / 2;
				rectMoy[1].yCoord = (rectangleBillard[2].yCoord + rectangleBillard[3].yCoord + rectangleBillard[4].yCoord + rectangleBillard[5].yCoord) / 4;
				rectMoy[2].yCoord = (rectangleBillard[6].yCoord + rectangleBillard[7].yCoord) / 2;
				rectMoy[3].yCoord = (rectangleBillard[8].yCoord + rectangleBillard[9].yCoord + rectangleBillard[10].yCoord + rectangleBillard[11].yCoord) / 4;

		
				// calcul de l'angle
				iAngle1 = (atan2(rectangleBillard[0].xCoord - rectangleBillard[1].xCoord , rectangleBillard[0].yCoord - rectangleBillard[1].yCoord)) * (180/PI);
				iAngle2 = (atan2(rectangleBillard[2].yCoord - rectangleBillard[5].yCoord , rectangleBillard[5].xCoord - rectangleBillard[2].xCoord)) * (180/PI);
				iAngle3 = (atan2(rectangleBillard[7].xCoord - rectangleBillard[6].xCoord , rectangleBillard[7].yCoord - rectangleBillard[6].yCoord)) * (180/PI);
				iAngle4 = (atan2(rectangleBillard[11].yCoord - rectangleBillard[8].yCoord , rectangleBillard[8].xCoord - rectangleBillard[11].xCoord)) * (180/PI);
		 
				iAngle = (iAngle1 + iAngle2 + iAngle3 + iAngle4) / 4;

				cout << iAngle << endl;
				cout << iAngle1 << endl;
				cout << iAngle2 << endl;
				cout << iAngle3 << endl;
				cout << iAngle4 << endl;

				compteurDePoint++; //évite que le calcul se fasse plein de fois
			}
	 
			//get the affine transformation matrix
			Mat matRotation = getRotationMatrix2D( Point(matOriginalFrame.cols / 2, matOriginalFrame.rows / 2), - iAngle , 1 ); //iAngle = 182
 
			warpAffine( matOriginalFrame, matRotatedFrame, matRotation, matOriginalFrame.size() );

			//ROI: Region Of Interest : on ne va traiter que cette partie de la matrice
			// Recadrer l'image
			Rect myROI = cvRect( rectMoy[0].xCoord, rectMoy[1].yCoord, rectMoy[2].xCoord - rectMoy[0].xCoord, rectMoy[3].yCoord - rectMoy[1].yCoord);

			matRecadrer = matRotatedFrame(myROI);
		}
		else //On prend l'image d'origine tant qu'on a pas redré l'image
		{
			matRecadrer = matOriginalFrame;
		}

		/////////////////////////Detection de cercles/////////////////////////


		//On crée deux matrices
		//src : image d'origine
		//gray : image convertie en noir et blanc
		Mat src, gray;
		//src = imread( "building.jpg", 1 );resize(src,src,Size(640,480));
		//cap.read(src);
		src = matRecadrer;
		//Convert src in black and white and store it in matrix gray
		cvtColor( src, gray, CV_BGR2GRAY );
 
		// Reduce the noise so we avoid false circle detection
		// Take gray, return gray, 
		GaussianBlur( gray, gray, Size(9, 9), 1, 1 );
 
		vector<Vec3f> circles;

		//circles.resize(16); // Redéfini le nombre de cercles recherchés -> il faudrait trouver comment utiliser gpu car dasn ce cas le nombre de cercles est un paramêtre de HoughCircle -> c'est mieux !!!
 
		// Apply the Hough Transform to find the circles
		HoughCircles( gray, circles, CV_HOUGH_GRADIENT, 1, DIST_MIN, thresholdCanny, thresholdCenter, MIN_SIZE, MAX_SIZE );
 

		// Draw the circles detected
		for( size_t i = 0; i < circles.size(); i++ )
		{
			Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
			int radius = cvRound(circles[i][2]);     
			//circle( src, center, 2, Scalar(0,255,0), -1, 8, 0 );// circle center     
			circle( src, center, radius, Scalar(0,0,255), 2, 8, 0 );// circle outline
			//cout << "center : " << center << "\nradius : " << radius << endl;
		}


		////////////////////////////////Détection de couleurs à l'intérieur des cercles///////////////////////////////////////////////////
		Mat img_rgb, img_hsv;
		img_rgb = src;
		//On converti img_rgb en img_hsv
		cvtColor(img_rgb,img_hsv,CV_RGB2HSV);
		//On crée un tableau des billes
		struct Bille TableauBilles[16];
		//On cherche le couleur à l'intérieur de chaque cercle
		for (size_t i = 0; i < circles.size() ; i++) //pour éviter les erreures d'assertion
		{
			
			//for(int j = 0; j < 10; j++)//On parcours quelques points de la bille pour faire une moyenne
			//{
			int bla = compteurDeCouleur % 1; //On fait l'opération une fois tous les 2 tours
			if(bla == 0)
			{
				//Dans la fonction qui suit y est en premier et x en second
				
				//Le "point" la ligne qui suit est d'une importance primordiale !!!!
				Vec3b intensity = img_hsv.at<Vec3b>(Point(cvRound(circles[i][0]), cvRound(circles[i][1])));//On s'intéresse ici au point d'une des billes
				/* In case of BGR coded image
				int blue = intensity.val[0];
				int green = intensity.val[1];
				int red = intensity.val[2];
				*/
				
				
				//cout << "Bille n° " << i << " is ( " << blue << " ," << green << " ," << red << " )" << endl;
				
				// In case of HVS coded image
				int intens0 = (int)intensity.val[0];
				int intens1 = (int)intensity.val[1];
				int intens2 = (int)intensity.val[2];

				//Si la couleur est comprise dans un intervalle correct alors on considère qu'on a une bille sinon non
				
				
				if(intens1 < maxBlanche)
				{
					TableauBilles[i].color = "Blanche";
					cout << "Color " << TableauBilles[i].color <<endl;
					cout << "( " << intens0 << ", " << intens1 << ", " << intens2 << " )" << endl;
					
					putText(src, TableauBilles[i].color, cv::Point(cvRound(circles[i][0]), cvRound(circles[i][1])),1,1,Scalar(255,0,0));  
				}
				else if(intens2 < maxNoire)
				{
					TableauBilles[i].color = "Noire";
					cout << "Color " << TableauBilles[i].color <<endl;
					cout << "( " << intens0 << ", " << intens1 << ", " << intens2 << " )" << endl;
					
					putText(src, TableauBilles[i].color, cv::Point(cvRound(circles[i][0]), cvRound(circles[i][1])),1,1,Scalar(255,0,0));  
				}
				else if(intens0 < maxRed && intens0 > minRed)
				{
					TableauBilles[i].color = "Rouge";
					cout << "Color " << TableauBilles[i].color <<endl;
					cout << "( " << intens0 << ", " << intens1 << ", " << intens2 << " )" << endl;
					
					putText(src, TableauBilles[i].color, cv::Point(cvRound(circles[i][0]), cvRound(circles[i][1])),1,1,Scalar(255,0,0));  
				}
				else if(intens0 > minJaune && intens0 < maxJaune)
				{
					TableauBilles[i].color = "Jaune";
					cout << "Color " << TableauBilles[i].color <<endl;
					cout << "( " << intens0 << ", " << intens1 << ", " << intens2 << " )" << endl;
					
					putText(src, TableauBilles[i].color, cv::Point(cvRound(circles[i][0]), cvRound(circles[i][1])),1,1,Scalar(255,0,0));  
				}
				else
				{
					TableauBilles[i].color = "Unknown"; // for unknonw : ce n'est pas un bille
					cout << "Color " << TableauBilles[i].color <<endl;
					cout << "( " << intens0 << ", " << intens1 << ", " << intens2 << " )" << endl;
					
					putText(src, TableauBilles[i].color, cv::Point(cvRound(circles[i][0]), cvRound(circles[i][1])),1,1,Scalar(255,0,0));  
				}
				//cout << "( " << intens0 << ", " << intens1 << ", " << intens2 << " )" << endl;
				//cout << "Color " << TableauBilles[i].color <<endl;
				//cout << "Couleur ( " << intensity[0] << ", " << intensity[1] << ", " << intensity[2] << " )" << endl;
				
			}
			else
			{

			}
		}
		
		compteurDeCouleur ++;
		/////////////////////////Affichage//////////////////////////

		// Affiche le resultat
		//imshow( pzRotatingWindowName, matRecadrer);
			
		imshow(pzCirclesWindowName, src);
		


		//wait for 'esc' key press for 30 ms. If 'esc' key is pressed, break loop
		if (waitKey(30) == 27) 
		{
			cout << "esc key is pressed by user" << endl; 
			break; 
		}
	}
    return 0;
}