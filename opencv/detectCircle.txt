#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include <cmath>
#include <string>

using namespace cv;
using namespace std;

int thresholdCanny = 200;
int thresholdCenter = 30;

const string trackbarWindowName = "Trackbars";

void on_trackbar( int, void* )
{//This function gets called whenever a
	// trackbar position is changed
}

void createTrackbars(){
	//create window for trackbars


	namedWindow(trackbarWindowName,0);
	//create memory to store trackbar name on window
	char TrackbarName[50];
	sprintf( TrackbarName, "UpperCanny", thresholdCanny);
	sprintf( TrackbarName, "CenterDetection", thresholdCenter);

	//create trackbars and insert them into window
	//3 parameters are: the address of the variable that is changing when the trackbar is moved(eg.H_LOW),
	//the max value the trackbar can move (eg. H_HIGH), 
	//and the function that is called whenever the trackbar is moved(eg. on_trackbar)
	//                                  ---->    ---->     ---->      
	createTrackbar( "UpperCanny", trackbarWindowName, &thresholdCanny, 256, on_trackbar );
	createTrackbar( "CenterDetection", trackbarWindowName, &thresholdCenter, 256, on_trackbar );


}







int main(int argc, char* argv[])
{
    // open the video file for reading
    VideoCapture cap("Capture_20150128_2.mp4"); 

    // if not success, exit program
    if ( !cap.isOpened() )  
    {
         cout << "Cannot open the video file" << endl;
         return -1;
    }

    const char* pzOriginalWindowName = "Original Video";
    namedWindow(pzOriginalWindowName, CV_WINDOW_AUTOSIZE); 

    const char* pzCirclesWindowName = "Circles Video";
    namedWindow( pzCirclesWindowName, CV_WINDOW_AUTOSIZE );


	createTrackbars();

    while (true)
    {
        Mat matOriginalFrame;

/////////////////////////////////////////////////////////////////////////////////////////////////
		//On crée deux matrices
		//src : image d'origine
		//gray : image convertie en noir et blanc
		Mat src, gray;
		//src = imread( "building.jpg", 1 );resize(src,src,Size(640,480));
		cap.read(src);
		//Convert src in black and white and store it in matrix gray
		cvtColor( src, gray, CV_BGR2GRAY );
 
		// Reduce the noise so we avoid false circle detection
		// Take gray, return gray, 
		GaussianBlur( gray, gray, Size(9, 9), 1, 1 );
 
		vector<Vec3f> circles;

		
 
		// Apply the Hough Transform to find the circles
		HoughCircles( gray, circles, CV_HOUGH_GRADIENT, 1, 5, thresholdCanny, thresholdCenter, 5, 10 );
 
		// Draw the circles detected
		for( size_t i = 0; i < circles.size(); i++ )
		{
			Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
			int radius = cvRound(circles[i][2]);     
			circle( src, center, 3, Scalar(0,255,0), -1, 8, 0 );// circle center     
			circle( src, center, radius, Scalar(0,0,255), 3, 8, 0 );// circle outline
			//cout << "center : " << center << "\nradius : " << radius << endl;
		}



  ///////////////////////////////////////////////////////////////////////////////////////





		// read a new frame from video
        bool bSuccess = cap.read(matOriginalFrame); 

		//if not success, break loop
        if (!bSuccess) 
		{
			cout << "Cannot read the frame from video file" << endl;
			break;
        }

		//Affiche dans les deux fenêtres
		imshow(pzOriginalWindowName, matOriginalFrame);
		imshow(pzCirclesWindowName, src);

		//wait for 'esc' key press for 30 ms. If 'esc' key is pressed, break loop
		if (waitKey(30) == 27) 
		{
			cout << "esc key is pressed by user" << endl; 
			break; 
		}
	}
    return 0;
}